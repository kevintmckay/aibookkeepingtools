name: daily-content

on:
  # schedule:
    # 01:00 PM US/Pacific ≈ 21:00 UTC
    # - cron: "0 21 * * *"
  workflow_dispatch: {}  # Keep manual trigger available

permissions:
  contents: write

concurrency:
  group: daily-content
  cancel-in-progress: false

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 35  # Reduced from 45 to optimize CI time

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate posts (with retries)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          POSTS_PER_RUN: "1"
          MODEL_OUTLINE: "gpt-4o"
          MODEL_DRAFT: "gpt-4o"          # Premium quality enabled
          MAX_DAILY_COST_USD: "5.0"      # $5/day budget limit
          ENABLE_QUALITY_CHECKS: "1"     # Enable content quality analysis
          MIN_WORD_COUNT: "1200"          # Minimum words for SEO
          TARGET_READING_LEVEL: "12"      # Target grade level for content
          DISABLE_HEARTBEAT: "1"        # skip heartbeat files in CI
        run: |
          set -euo pipefail
          attempts=0
          until ./scripts/generate_posts.py; do
            code=$?
            attempts=$((attempts+1))
            if [ $attempts -ge 5 ]; then
              echo "generator failed after $attempts attempts (exit $code)"
              exit $code
            fi
            sleep $(( attempts * 10 ))   # 10s, 20s, 30s, ...
          done

      - name: Commit & rebase-push new posts
        id: commit
        run: |
          set -euo pipefail

          git config user.name  "Content Bot"
          git config user.email "bot@users.noreply.github.com"

          # Stage ALL changes (posts + topics files, etc.)
          git add -A

          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "changed=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git commit -m "chore: daily AI posts"

          # Fold in any files that changed between add & commit
          git add -A
          if ! git diff --cached --quiet; then
            git commit --amend --no-edit
          fi

          # Ensure clean tree before rebase
          git clean -fd

          git fetch origin main
          if ! git rebase origin/main; then
            echo "Rebase conflict. Aborting rebase."
            git rebase --abort || true
            exit 1
          fi

          # Push (retry once)
          tries=0
          until git push origin HEAD:main; do
            tries=$((tries+1))
            if [ $tries -ge 2 ]; then
              echo "Push still failing after rebase and retry."
              exit 1
            fi
            echo "Push race detected, refetching and rebasing then retrying..."
            git fetch origin main
            git rebase origin/main || { git rebase --abort || true; exit 1; }
            sleep 3
          done

          echo "changed=1" >> "$GITHUB_OUTPUT"

      - name: Collect URLs to verify
        id: urls
        if: steps.commit.outputs.changed == '1'
        run: |
          set -euo pipefail

          TMPDIR="$(mktemp -d)"
          CHANGED="$TMPDIR/changed_files.txt"
          URLS="$TMPDIR/urls.txt"
          BASE_URL="https://aibookkeepingtools.com"

          # Capture changed post files from the last commit
          { git log -1 --name-only --pretty="" | grep -E '^content/posts/.*\.md$' || true; } > "$CHANGED"

          # Build full URLs for sitemap check
          : > "$URLS"
          while read -r f; do
            [ -z "${f:-}" ] && continue
            slug="$(basename "$f" .md)"
            echo "${BASE_URL}/posts/${slug}/" >> "$URLS"
          done < "$CHANGED"

          echo "URLs to verify:"
          cat "$URLS" || true

          if [ -s "$URLS" ]; then
            echo "have_urls=1" >> "$GITHUB_OUTPUT"
            echo "urls_file=$URLS" >> "$GITHUB_OUTPUT"
          else
            echo "have_urls=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Wait for deployment and verify posts are live
        if: steps.urls.outputs.have_urls == '1'
        run: |
          set -euo pipefail

          urls_file="${{ steps.urls.outputs.urls_file }}"

          echo "Waiting for Cloudflare Pages to build and deploy..."
          echo "This typically takes 3-5 minutes for Hugo sites on Cloudflare Pages"
          
          # Initial wait to let Cloudflare Pages start building
          sleep 90  # 1.5 minutes initial wait

          tries=0
          max=8
          all_live=0
          
          while [ $tries -lt $max ]; do
            tries=$((tries+1))
            echo "Verifying posts are live (attempt $tries/$max)..."
            
            missing=0
            while read -r url; do
              [ -z "${url:-}" ] && continue
              echo "  Checking: $url"
              
              # Check if URL returns 200 OK (post is live)
              if curl -fsSL -A 'CI-Deploy-Check' --max-time 10 "$url" > /dev/null 2>&1; then
                echo "    ✅ Live"
              else
                echo "    ❌ Not yet accessible"
                missing=$((missing+1))
              fi
            done < "$urls_file"

            if [ $missing -eq 0 ]; then
              echo "All new posts are live and accessible! ✅"
              all_live=1
              break
            else
              echo "$missing post(s) not yet accessible."
            fi
            
            # Progressive backoff
            if [ $tries -le 2 ]; then
              echo "Waiting 45 seconds before next attempt..."
              sleep 45
            elif [ $tries -le 5 ]; then
              echo "Waiting 60 seconds before next attempt..."
              sleep 60
            else
              echo "Waiting 90 seconds before next attempt..."
              sleep 90
            fi
          done

          if [ $all_live -ne 1 ]; then
            echo "Some posts are still not accessible after waiting."
            echo "This could indicate a Cloudflare Pages build failure or deployment issue."
            echo "Check the Cloudflare Pages dashboard for build errors."
            exit 1
          fi
          
          echo "Deployment verification complete! All posts are live."
